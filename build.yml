parameters:
  name: ''
  queue: ''
  platform: ''
  daemon: '0.0.2' # Version of the daemon to download
  arch: 'x64' # Only overriden by 32-bit Windows
  configuration: 'Release' # Only do Debug if specified

phases:
- phase: ${{ parameters.name }}
  #displayName: ${{ parameters.displayName }}
  displayName: ${{ format('City Hub ({0}-{1})', parameters.platform, parameters.arch) }}
  queue: ${{ parameters.queue }}
  steps:

  - task: NodeTool@0
    displayName: upgrade node
    inputs:
      versionSpec: '8.x' # Required by Angular 6

  - task: Npm@1
    displayName: npm install
    inputs:
      verbose: false

  - powershell: |
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    $url = "https://github.com/CityChainFoundation/city-chain/releases/download/v0.0.2/City.Chain-0.0.2-win-x64.zip"
    $output = "$PSScriptRoot\City.Chain-0.0.2-win-x64.zip"
    $start_time = Get-Date
    (New-Object System.Net.WebClient).DownloadFile($url, $output)
    Write-Output "Saved: $output"
    Write-Output "Time taken: $((Get-Date).Subtract($start_time).Seconds) second(s)" 
    displayName: Download daemon

  # - task: automagically.DownloadExtractFile.DownloadExtractFile.DownloadExtractFile@1
  #   displayName: Download and extract daemon
  #   inputs:

  #     ${{ if eq(parameters.platform, 'linux') }}:
  #       FileUrl: ${{ format('https://github.com/CityChainFoundation/city-chain/releases/download/v{0}/City.Chain-{0}-{1}-{2}.tar.gz', parameters.daemon, parameters.platform, parameters.arch) }}
  #     ${{ if ne(parameters.platform, 'linux') }}:
  #       FileUrl: ${{ format('https://github.com/CityChainFoundation/city-chain/releases/download/v{0}/City.Chain-{0}-{1}-{2}.zip', parameters.daemon, parameters.platform, parameters.arch) }}
      
  #     requireExtraction: true
  #     ExtractedArchivePath: '$(System.DefaultWorkingDirectory)/daemon'

  - task: Npm@1
    displayName: npm run publish
    inputs:
      command: custom
      verbose: false
      ${{ if eq(parameters.platform, 'win') }}:
        customCommand: ${{ format('run publish:{0}:{1}', parameters.platform, parameters.arch) }} 
      ${{ if ne(parameters.platform, 'win') }}:
        customCommand: ${{ format('run publish:{0}', parameters.platform) }} 
    env:
      GH_TOKEN: $(GH_TOKEN)

    # Not able to use matrix setup in the template, figure out how to do that in the future to more easily build different outputs on the same agent instance.
    # matrix:
    #     x64_debug:
    #       buildArch: x64
    #       buildConfig: debug
    #     x64_release:
    #       buildArch: x64
    #       buildConfig: release
    #     x86_release:
    #       buildArch: x86
    #       buildConfig: release
  # steps:
  # - script: echo hello from $(parameters.name) and $(parameters.queue) and $(arch) and $(parameters.configuration)
  # - task: DotNetCoreCLI@2
  #   displayName: dotnet publish
  #   inputs:
  #     command: publish
  #     arguments: '-c ${{ parameters.configuration }} -r ${{ parameters.platform }}-${{ parameters.arch }} -v m'
  #     workingDirectory: 'src/city-chain/src/City.Chain'

# steps:
# - task: DotNetCoreCLI@2
#   displayName: dotnet publish
#   inputs:
#     command: publish
#     arguments: '-c release'
#     workingDirectory: 'src/app'


  #- script: build arch=$(arch) config=$(buildConfig)
   
  # - script: "echo $(arch) $(configuration) --- $(parameters.arch) $(parameters.configuration)"
  # - script: echo "##vso[task.setvariable variable=myOutputVar;isOutput=true]this is the $(configuration) value"
  #- script: npm install
  #- script: npm test

