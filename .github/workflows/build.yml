name: Build

on: 
  push:
    branches:
      - feature/*

jobs:
  
  buildTestRelease:

    strategy:
      matrix:
        #os: [ windows-latest, ubuntu-latest, macos-latest ]
        os: [ ubuntu-latest ]
        include:
          - os: windows-latest
            extension: ".zip"
            runtime: "win-x64"
            platform: "win"
          - os: ubuntu-latest
            extension: ".tar.gz"
            runtime: "linux-x64"
            platform: "linux"
          - os: macos-latest
            runtime: "osx-x64"
            extension: ".zip"
            platform: "osx"
        node_version: [10.x]
        dotnet_version: ['2.1.607']
      fail-fast: false

    runs-on: ${{ matrix.os }}
    
    env:
      PROJECT_NAME: 'City.Chain'
      SOLUTION_PATH: 'src/City.Chain.sln'
      PROJECT_PATH: 'src/City.Chain/City.Chain.csproj'
      BUILD_CONFIGURATION: 'Release'
      DAEMON: '1.0.21'
      ARCH: 'x64'

    steps:

    - uses: actions/checkout@v1
      name: Checkout

    - name: Setup Node.js (${{ matrix.node_version }})
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node_version }}

    - name: Variables
      run: |
        echo "::set-env name=VERSION::$(npm run version --silent)"
        echo "::set-env name=RELEASE_CONFIGURATION::${{ matrix.runtime }}"

    - name: Tooling
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install snapd
        sudo snap install --classic snapcraft

    - name: Download City Chain
      shell: pwsh
      run: |
        echo ${env:PATH}
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
        $url = "https://github.com/CityChainFoundation/city-chain/releases/download/v${{ env.DAEMON }}/City.Chain-${{ env.DAEMON }}-${{ matrix.platform }}-${{ env.ARCH }}${{ matrix.extension }}"
        $output = "daemon${{ matrix.extension }}"
        Write-Output "Url: $url"
        Write-Output "Path: $output"
        $start_time = Get-Date
        (New-Object System.Net.WebClient).DownloadFile($url, $output)
        Write-Output "Time taken: $((Get-Date).Subtract($start_time).Seconds) second(s)" 

    - name: Unpack (Windows)
      if: matrix.os == 'windows-latest'
      run: 7z x daemon${{ matrix.extension }} -odaemon

    - name: Unpack (Mac)
      if: matrix.os == 'macos-latest'
      run: unzip -a daemon${{ matrix.extension }} -d daemon

    - name: Unpack (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: tar -xvzf daemon${{ matrix.extension }} -C daemon

    - name: Install (npm)
      run: npm install

    - name: Build (npm)
      run: npm run build:${{ matrix.platform }}

    - name: Release (npm)
      run: npm run publish:${{ matrix.platform }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # - name: Setup .NET Core (${{ matrix.dotnet_version }})
    #   uses: actions/setup-dotnet@v1
    #   with:
    #     dotnet-version: ${{ matrix.dotnet_version }}

    # - name: Restore
    #   run: dotnet restore ${{env.SOLUTION_PATH}}

    # - name: Build
    #   run: dotnet build -c ${{env.BUILD_CONFIGURATION}} -r ${{env.RELEASE_CONFIGURATION}} -v m ${{env.SOLUTION_PATH}}

    # - name: Publish
    #   run: dotnet publish -c ${{env.BUILD_CONFIGURATION}} -r ${{env.RELEASE_CONFIGURATION}} -v m -o ./bin/publish ${{env.PROJECT_PATH}}

    # - name: Package Name
    #   run: |
    #     echo "::set-env name=RELEASE_NAME::${{ env.PROJECT_NAME }}-${{ env.VERSION }}-${{ env.RELEASE_CONFIGURATION }}${{ matrix.extension }}"
    #     echo "::set-env name=RELEASE_PATH::${{ env.PROJECT_NAME }}-${{ env.VERSION }}-${{ env.RELEASE_CONFIGURATION }}${{ matrix.extension }}"

    # - name: Package (Linux)
    #   if: matrix.os == 'ubuntu-latest'
    #   run: |
    #     echo "::set-env name=RELEASE_PATH::./src/${{env.PROJECT_NAME}}/bin/publish/${{env.RELEASE_NAME}}"
    #     cd ./src/${{env.PROJECT_NAME}}/bin/publish/
    #     tar cvzf ${{env.RELEASE_NAME}} *

    # - name: Package (Windows)
    #   if: matrix.os == 'windows-latest'
    #   run: Compress-Archive -Path .\src\${{env.PROJECT_NAME}}\bin\publish\* -DestinationPath .\${{env.RELEASE_NAME}}

    # - name: Package (Mac)
    #   if: matrix.os == 'macos-latest'
    #   run: zip -j -r ${{env.RELEASE_NAME}} ./src/${{env.PROJECT_NAME}}/bin/publish/

    # - name: Release
    #   uses: sondreb/action-release@master
    #   with:
    #     token: ${{ secrets.GITHUB_TOKEN }}
    #     files: "${{env.RELEASE_PATH}}"
    #     draft: true
    #     prerelease: true
    #     body: ''
    #     name: "City Chain (Release ${{env.VERSION}})"
    #     tag: v${{env.VERSION}}
