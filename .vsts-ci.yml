# City Hub - Continuous Integration Setup - VSTS

# It is important that the initial Agent Queue on VSTS is configured to be "Hosted Linux Preview", and not "Hosted VS2017".
# If this is not configured correctly, builds will fail with error: 
# "Could not find a queue with name Hosted macOS Preview. The queue does not exist or has not been authorized for use."

# Not able to use matrix setup in the template, figure out how to do that in the future to more easily build different outputs on the same agent instance.
# Until someone finds a solution, we'll define custom phases for both x86 and x64 on Windows. Do we still want to support 32-bit builds?

phases:
- template: build.yml
  parameters:
    name: macOS
    platform: mac
    queue: Hosted macOS Preview

- template: build.yml
  parameters:
    name: Linux
    platform: linux
    queue: Hosted Linux Preview

- template: build.yml
  parameters:
    name: Windows_x86
    platform: win
    arch: x86
    queue: Hosted VS2017

- template: build.yml
  parameters:
    name: Windows_x64
    platform: win
    queue: Hosted VS2017

name: $(BuildDefinitionName)_$(Date:yyyyMMdd)$(Rev:.rr)

# phases:
# - phase: Windows
#   queue: Hosted VS2017
#   displayName: Windows (x64)
#   steps:
#   - script: echo hello from Windows $env:arch
#     env:
#       arch:x64
#       configuration:Release

# - phase: macOS
#   queue: Hosted macOS Preview
#   displayName: macOS (x64)
#   steps:
#   - script: echo hello from macOS $env:arch

# - phase: Linux
#   queue: Hosted Linux Preview
#   displayName: Linux (AppImage, x64)
#   steps:
#   - script: echo hello from Linux
#   - task: DotNetCoreCLI@2
#     displayName: dotnet publish
#     inputs:
#       command: publish
#       arguments: '-c $env:configuration -v m -r $env:arch'
#     env:
#       arch:x64
#       configuration:Release

# name: $(BuildDefinitionName)_$(Date:yyyyMMdd)$(Rev:.rr)



#   phases:
# - phase: Windows
#   queue:
#     demands: agent.os -equals Windows_NT
#   steps:
#   - script: echo hello from Windows
# - phase: macOS
#   queue:
#     demands: agent.os -equals Darwin
#   steps:
#   - script: echo hello from macOS
# - phase: Linux
#   queue:
#     demands: agent.os -equals Linux
#   steps:
#   - script: echo hello from Linux
  


#name: $(BuildDefinitionName)_$(Date:yyyyMMdd)$(Rev:.rr)

# queue:
#   parallel: 2 # Limit to two agents at a time
#   matrix:
#     x64_release:
#       queue: Hosted VS2017
#       buildArch: x64
#       buildConfig: release
#     x86_release:
#       queue: Hosted VS2017
#       buildArch: x86
#       buildConfig: release
#     linux:
#       queue: Hosted Linux Preview
#       buildArch: x64
#       buildConfig: release
#     mac:
#       queue: Hosted macOS Preview
#       buildArch: x64
#       buildConfig: release
#steps:
#- script: build arch=$(buildArch) config=$(buildConfig)



# steps:

# - script: |
#     echo hello world from %MyName%
#     echo Agent.HomeDirectory is %CD%
#   workingDirectory: $(Agent.HomeDirectory)
#   env:
#     MyName: $(Agent.MachineName)
#   condition: and(succeeded(), eq(variables['agent.os'], 'windows_nt'))
#   displayName: Greeting from Windows machine

# - script: |
#     echo hello world from $MyName
#     echo Agent.HomeDirectory is $PWD
#   workingDirectory: $(Agent.HomeDirectory)
#   env:
#     MyName: $(Agent.MachineName)
#   condition: and(succeeded(), in(variables['agent.os'], 'darwin', 'linux'))
#   displayName: Greeting from macOS or Linux machine
